/*--------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * See License.txt in the project root for license information.
 *--------------------------------------------------------------*/

/* eslint-disable no-duplicate-imports */
import * as Msdyn365 from '@msdyn365-commerce/core';
import { INodeProps } from '@msdyn365-commerce-modules/utilities';
import * as React from 'react';

import { IAdditionalContentData, ILinksData } from '../super-content-block.props.autogenerated';

/**
 * IContentBlockAdditionalContentProps: Interface for
 * Content Block Additional Content Component props.
 */
export interface IContentBlockAdditionalContentProps {
    requestContext: Msdyn365.IRequestContext;
    additionalContent: IAdditionalContentData[] | undefined;
    handleAdditionalTextChange(index: number, event: Msdyn365.ContentEditableEvent): void;
    handleAdditionalParagraphChange(index: number, event: Msdyn365.ContentEditableEvent): void;
    handleAdditionalLinkTextChange(linkIndex: number, index: number, event: Msdyn365.ContentEditableEvent): void;
}

/**
 * IContentBlockAdditionalContentProps: Interface for
 * Content Block Additional Content view props.
 */
export interface IContentBlockAdditionalContentViewProps {
    additionalContentNode: INodeProps;
    additionalContentItems?: IContentBlockAdditionalContentItemViewProps[];
}

/**
 * IContentBlockAdditionalContentProps: Interface for
 * Content Block Additional Content Item view props.
 */
export interface IContentBlockAdditionalContentItemViewProps {
    heading: React.ReactNode;
    text: React.ReactNode;
    links: React.ReactNode;
    additionalContentItemContainer: INodeProps;
    additionalContentItemLinks: INodeProps;
}

/**
 * Renders additional content heading.
 * @param additionalContentHeading - Additional content heading.
 * @param props - Content Block Additional content component props.
 * @param itemIndex - Item index.
 * @returns Heading Node.
 */
const renderHeading = (additionalContentHeading: string, props: IContentBlockAdditionalContentProps, itemIndex: number) => {
    const requestContext = props.requestContext;
    return (
        <Msdyn365.Text
            text={additionalContentHeading}
            tag='p'
            className='ms-content-block__details__additional-content__text'
            editProps={{
                /**
                 * On edit event for heading text change.
                 * @param event - Change event.
                 */
                onEdit: event => {
                    props.handleAdditionalTextChange(itemIndex, event);
                },
                requestContext
            }}
        />
    );
};

/**
 * Renders additional content heading.
 * @param additionalContentParagraphText - Additional content paragraph text.
 * @param props - Content Block Additional content component props.
 * @param itemIndex - Item index.
 * @returns Paragraph Node.
 */
const renderParagraph = (additionalContentParagraphText: string, props: IContentBlockAdditionalContentProps, itemIndex: number) => {
    const requestContext = props.requestContext;
    return (
        <Msdyn365.Text
            text={additionalContentParagraphText}
            tag='p'
            className='ms-content-block__details__additional-content__paragraph'
            editProps={{
                /**
                 * On edit event for heading text change.
                 * @param event - Change event.
                 */
                onEdit: event => {
                    props.handleAdditionalTextChange(itemIndex, event);
                },
                requestContext
            }}
        />
    );
};

/**
 * Renders additional content heading.
 * @param ctaLink - Additional content link.
 * @param props - Content Block Additional content component props.
 * @param itemIndex - Item index.
 * @param linkIndex - Additional content link index.
 * @returns Link Node.
 */
const renderLinks = (ctaLink: ILinksData, props: IContentBlockAdditionalContentProps, itemIndex: number, linkIndex: number) => {
    const editableLink: Msdyn365.ILinksData = {
        ariaLabel: ctaLink.ariaLabel,
        className: 'ms-content-block__details__additional-content-cta-links',
        linkText: ctaLink.linkText,
        linkUrl: ctaLink.linkUrl.destinationUrl,
        openInNewTab: ctaLink.openInNewTab,
        role: 'button'
    };
    const requestContext = props.requestContext;
    return (
        <Msdyn365.Link
            key={linkIndex}
            link={editableLink}
            editProps={{
                /**
                 * Handle additional Link Text change.
                 * @param event - The keyboard event.
                 */
                onTextChange: event => {
                    props.handleAdditionalLinkTextChange(linkIndex, itemIndex, event);
                },
                requestContext
            }}
        />
    );
};

/**
 * Create node for each additonal content item.
 * @param item - Content block additonal content item props.
 * @param props - Content Block Additional content component props.
 * @param itemIndex - Item index.
 * @returns IContentBlockAdditionalContentItemViewProps.
 */
const assembleNode = (
    item: IAdditionalContentData,
    props: IContentBlockAdditionalContentProps,
    itemIndex: number
): IContentBlockAdditionalContentItemViewProps => {
    const headingNode = item.heading && renderHeading(item.heading, props, itemIndex);
    const paragraphNode = item.subtext && renderParagraph(item.subtext, props, itemIndex);
    const linksNode = item.links?.map((ctaLink: ILinksData, index: number) => {
        return renderLinks(ctaLink, props, itemIndex, index);
    });

    return {
        heading: headingNode,
        text: paragraphNode,
        links: linksNode,
        additionalContentItemContainer: { className: 'ms-content-block__details__additional-content__container' },
        additionalContentItemLinks: { className: 'ms-content-block__details__additional-content-cta' }
    };
};

/**
 * ContentBlockAdditionalContent component.
 * @param props - Content Block Additional content component props.
 * @returns Content Block Additional content view props.
 */
export const contentBlockAdditionalContent = (
    props: IContentBlockAdditionalContentProps
): IContentBlockAdditionalContentViewProps | undefined => {
    const { additionalContent } = props;
    if (!additionalContent) {
        return undefined;
    }

    const reactNodes: IContentBlockAdditionalContentItemViewProps[] = [];
    additionalContent.map((item, index: number) => {
        return reactNodes.push(assembleNode(item, props, index));
    });

    return {
        additionalContentNode: { className: 'ms-content-block__details__additional-content' },
        additionalContentItems: reactNodes
    };
};
