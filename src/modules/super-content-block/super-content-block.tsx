/*--------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * See License.txt in the project root for license information.
 *--------------------------------------------------------------*/

/* eslint-disable no-duplicate-imports */
import * as Msdyn365 from '@msdyn365-commerce/core';
import { ArrayExtensions } from '@msdyn365-commerce-modules/retail-actions';
import { getTelemetryObject, IModuleProps, INodeProps, ITelemetryContent } from '@msdyn365-commerce-modules/utilities';
import classnames from 'classnames';
import * as React from 'react';

import { contentBlockAdditionalContent, IContentBlockAdditionalContentViewProps } from './components/additional-content';
import LinksComponent from './components/links';
import { actionableRegion as region, ISuperContentBlockConfig, ISuperContentBlockProps } from './super-content-block.props.autogenerated';

export interface IContentBlockViewProps extends ISuperContentBlockProps<{}> {
    title?: React.ReactNode;
    text?: React.ReactNode;
    image?: React.ReactNode;
    links?: React.ReactNode;
    className?: string;
    contentBlockContainer: IModuleProps;
    imageContainer: INodeProps;
    detailsContainer: INodeProps;
    contentBlockAnchorTag?: INodeProps;
    imageLink?: string;
    imageAriaLabel?: string;
    additionalContent?: IContentBlockAdditionalContentViewProps;
    handleAdditionalText?(): void;
    handleAdditionalParagraph?(): void;
    handleAdditionalLinkTextChange?(): void;
}

/**
 * Site-builder configuration for the module.
 */
export interface IContentBlockFullConfig extends ISuperContentBlockConfig {
    // eslint-disable-next-line @typescript-eslint/naming-convention -- This field comes from SDK.
    msdyn365__moduleLayout?: string;
}

/**
 * ContentCard component.
 * @extends {React.PureComponent<ISuperContentBlockProps{}>}
 */
export class ContentBlock extends React.PureComponent<ISuperContentBlockProps<{}>> {
    private readonly telemetryContent: ITelemetryContent = getTelemetryObject(
        this.props.context.request.telemetryPageName!,
        this.props.friendlyName,
        this.props.telemetry
    );

    public render(): JSX.Element | null {
        const { heading, paragraph, image, links, className, imageAriaLabel } = this.props.config;
        const contentBlockTitle = heading && (
            <Msdyn365.Text
                className='ms-content-block__title'
                tag={heading.tag ?? 'h1'}
                text={heading.text}
                editProps={{ onEdit: this.handleTextChange, requestContext: this.props.context.request }}
            />
        );
        const imageProps = {
            gridSettings: this.props.context.request.gridSettings ?? {},
            imageSettings: image?.imageSettings
        };
        const contentBlockLinks = links && ArrayExtensions.hasElements(links) && (
            <LinksComponent
                {...{
                    links,
                    onTextChange: this.handleLinkTextChange,
                    requestContext: this.props.context.request,
                    telemetryContent: this.telemetryContent,
                    role: (this.props.config as IContentBlockFullConfig).msdyn365__moduleLayout === 'tile' ? 'link' : 'button'
                }}
            />
        );
        const contentBlockText = paragraph && (
            <Msdyn365.RichTextComponent
                text={paragraph}
                className='ms-content-block__text'
                editProps={{ onEdit: this.handleParagraphChange, requestContext: this.props.context.request }}
            />
        );
        const contentBlockImage = (
            <Msdyn365.Image
                {...image}
                {...imageProps}
                requestContext={this.props.context.request}
                editProps={{
                    key: this.props.config.image ?? {},
                    requestContext: this.props.context.request,
                    moduleType: this.props.typeName,
                    imagePropertyName: 'image',
                    moduleId: this.props.id,
                    layout: (this.props.config as IContentBlockFullConfig).msdyn365__moduleLayout
                }}
                shouldSkipToMainImage
            />
        );

        if (!contentBlockTitle && !contentBlockText && !contentBlockLinks) {
            this.props.context.telemetry.error('Content block content is empty, module wont render.');
            return null;
        }
        const contentBlockviewProps = {
            ...this.props,
            title: contentBlockTitle,
            text: contentBlockText,
            image: contentBlockImage,
            links: contentBlockLinks,
            moduleClass: this.props.config.className,
            contentBlockContainer: {
                moduleProps: this.props,
                className: classnames('ms-content-block', className)
            },
            imageContainer: { className: 'ms-content-block__image' },
            detailsContainer: { className: 'ms-content-block__details' },
            contentBlockAnchorTag: {
                tag: 'a',
                className: 'ms-content-block__link',
                role: 'link'
            },
            imageLink: this._getImageLink(),
            imageAriaLabel,
            additionalContent: contentBlockAdditionalContent({
                requestContext: this.props.context.request,
                additionalContent: this.props.config.additionalContent,
                handleAdditionalTextChange: this.handleAdditionalTextChange,
                handleAdditionalParagraphChange: this.handleAdditionalParagraphChange,
                handleAdditionalLinkTextChange: this.handleAdditionalLinkTextChange
            }),
            handleAdditionalText: this.handleAdditionalTextChange,
            handleAdditionalParagraph: this.handleAdditionalParagraphChange,
            handleAdditionalLinkTextChange: this.handleAdditionalLinkTextChange
        };

        return this.props.renderView(contentBlockviewProps) as React.ReactElement;
    }

    /**
     * To handle text change.
     * @param event - To handle text change event.
     * @name - HandleTextChange
     * @public
     * @returns - The Text value.
     */
    public handleTextChange = (event: Msdyn365.ContentEditableEvent) => (this.props.config.heading!.text = event.target.value);

    /**
     * To handle paragraph change.
     * @param event - To handle text change event.
     * @name - HandleParagraphChange
     * @public
     * @returns - The Paragraph value.
     */
    public handleParagraphChange = (event: Msdyn365.ContentEditableEvent) => (this.props.config.paragraph = event.target.value);

    /**
     * Handle link text change.
     * @param linkIndex - The link index.
     * @returns - Void.
     */
    public handleLinkTextChange = (linkIndex: number) => (event: Msdyn365.ContentEditableEvent) => {
        if (this.props.config.links && this.props.config.links[Number(linkIndex)]) {
            this.props.config.links[Number(linkIndex)].linkText = event.target.value;
        }
    };

    public handleAdditionalTextChange(index: number, event: Msdyn365.ContentEditableEvent): void {
        if (this.props.config.additionalContent) {
            this.props.config.additionalContent[Number(index)].heading = event.target.value;
        }
    }

    public handleAdditionalLinkTextChange(linkIndex: number, index: number, event: Msdyn365.ContentEditableEvent): void {
        const additionalContentObject =
            (this.props.config.additionalContent &&
                ArrayExtensions.hasElements(this.props.config.additionalContent) &&
                this.props.config.additionalContent[Number(index)]) ||
            {};
        if (additionalContentObject.links) {
            additionalContentObject.links[Number(linkIndex)].linkText = event.target.value;
        }
    }

    public handleAdditionalParagraphChange(index: number, event: Msdyn365.ContentEditableEvent): void {
        if (this.props.config.additionalContent) {
            this.props.config.additionalContent[Number(index)].subtext = event.target.value;
        }
    }

    private _getImageLink(): string | null {
        const { imageLink, links, actionableRegion } = this.props.config;
        if (actionableRegion === region.imageAndLinks) {
            if (imageLink?.destinationUrl) {
                return imageLink.destinationUrl;
            } else if (links && ArrayExtensions.hasElements(links) && links[0].linkUrl) {
                return links[0].linkUrl.destinationUrl;
            }
            return null;
        }
        return null;
    }
}

export default ContentBlock;
